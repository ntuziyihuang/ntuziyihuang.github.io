[{"content":"As part of improving my digital garden, I rebuilt my study notes website with a cleaner layout, better navigation and custom styling.\nKey aspects of the revamp include:\nMigrating content into a Hugo site using the PaperMod theme. Adding menus for notes, projects and tags to improve discoverability. Creating custom CSS to personalize colours, spacing and typography. Designing a hero section with an abstract graphic to welcome visitors. This project demonstrates how a static site generator like Hugo can be combined with thoughtful design to create a professional looking website.\n","permalink":"https://ntuziyihuang.github.io/projects/site-revamp/","summary":"A project focused on redesigning my study notes site using the Hugo framework and PaperMod theme.","title":"Study Notes Website Revamp"},{"content":"Test Write your content here…\n","permalink":"https://ntuziyihuang.github.io/notes/testing/","summary":"\u003ch1 id=\"test\"\u003eTest\u003c/h1\u003e\n\u003cp\u003eWrite your content here…\u003c/p\u003e","title":"123"},{"content":"About This Site This website serves as my personal hub for study notes, tutorials and projects.\nI am passionate about continual learning and enjoy documenting concepts in a way that makes them easy to reference and revisit later.\nThe notes section contains articles organized by topic with clear tables of contents, descriptive summaries and syntax‑highlighted code blocks.\nIn the projects section you’ll find examples of how I\u0026rsquo;ve applied these concepts in real‑world scenarios.\nFeel free to explore, share and provide feedback via the social links in the header.\nIf you find an error or would like to suggest an improvement, please click Suggest Changes at the bottom of any page.\n","permalink":"https://ntuziyihuang.github.io/about/","summary":"\u003ch2 id=\"about-this-site\"\u003eAbout This Site\u003c/h2\u003e\n\u003cp\u003eThis website serves as my personal hub for study notes, tutorials and projects.\u003cbr\u003e\nI am passionate about continual learning and enjoy documenting concepts in a way that makes them easy to reference and revisit later.\u003c/p\u003e\n\u003cp\u003eThe notes section contains articles organized by topic with clear tables of contents, descriptive summaries and syntax‑highlighted code blocks.\u003cbr\u003e\nIn the projects section you’ll find examples of how I\u0026rsquo;ve applied these concepts in real‑world scenarios.\u003c/p\u003e","title":"About"},{"content":"Python is a versatile, high‑level programming language that prioritizes readability and ease of use. It supports multiple programming paradigms and has a large standard library, making it suitable for everything from scripting and automation to web development and data science.\nVariables and Data Types Variables store values that your program can manipulate. Python is dynamically typed, so you don\u0026rsquo;t need to explicitly declare a variable\u0026rsquo;s type. Common data types include int, float, str, bool, list and dict.\na = 42 # integer b = 3.14 # floating point c = \u0026#34;Hello\u0026#34; # string d = True # boolean e = [1, 2, 3] # list f = {\u0026#34;x\u0026#34;: 10, \u0026#34;y\u0026#34;: 20} # dictionary print(a, b, c, d, e, f) Control Structures Python uses indentation to denote code blocks. Conditional statements and loops control the flow of your program.\nfor i in range(5): if i % 2 == 0: print(f\u0026#34;{i} is even\u0026#34;) else: print(f\u0026#34;{i} is odd\u0026#34;) Conclusion This note introduces Python\u0026rsquo;s core syntax and features. Subsequent articles will explore functions, modules, object‑oriented programming and practical projects.\n","permalink":"https://ntuziyihuang.github.io/notes/introduction-to-python/","summary":"A gentle introduction to Python programming language covering syntax, variables, data types and basic control structures.","title":"Introduction to Python"},{"content":"Data structures are ways to organize and store data efficiently to enable easy access and modification.\nChoosing the right data structure can greatly improve the performance and readability of your code.\nArrays and Lists Arrays (or lists in Python) are ordered collections that allow random access by index.\nThey are ideal when you need fast access and iteration.\nitems = [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;cherry\u0026#34;] print(items[1]) # banana Linked Lists A linked list consists of nodes where each node contains a value and a pointer to the next node.\nThey provide efficient insertions and deletions at the cost of slower random access.\nStacks and Queues Stacks follow a last‑in first‑out (LIFO) order and queues follow a first‑in first‑out (FIFO) order.\nThey are built on top of lists or linked lists.\n# stack example using a list stack = [] stack.append(1) stack.append(2) print(stack.pop()) # 2 # queue example using collections.deque from collections import deque queue = deque([1, 2, 3]) queue.append(4) print(queue.popleft()) # 1 Conclusion Understanding how common data structures work helps you decide which one to use in different situations.\nWe\u0026rsquo;ll explore trees, graphs and hash tables in future posts.\n","permalink":"https://ntuziyihuang.github.io/notes/data-structures/","summary":"Overview of fundamental data structures like arrays, linked lists, stacks, queues and how to choose the right one.","title":"Understanding Data Structures"}]